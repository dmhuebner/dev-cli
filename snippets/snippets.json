[
  {
    "name": "Angular Behavior Subject",
    "description": "A Behavior Subject as an Observable in the context of Angular",
    "content": "currentTimerValueSubject: BehaviorSubject<number> = new BehaviorSubject<number>();\ncurrentTimerValue$: Observable<number> = this.currentTimerValueSubject.asObservable();"
  },
  {
    "name": "Angular Timer Pipe",
    "description": "Angular Timer Pipe that takes seconds and formats them into a timer",
    "content": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timer'\n})\nexport class TimerPipe implements PipeTransform {\n\n  transform(seconds: any, args?: any): any {\n    const wholeSeconds = Math.floor(seconds);\n    const minutes = Math.floor(seconds / 60);\n\n    let secondsLeft: number | string = wholeSeconds % 60;\n    if (secondsLeft < 10) {\n      secondsLeft = '0' + secondsLeft;\n    }\n\n    const output = minutes + ':' + secondsLeft;\n\n    return output;\n  }\n\n}"
  },
  {
    "name": "Camel to Kebab Case",
    "description": "A function that transforms a string from camelCase to kebabCase",
    "content": "const camelToKebabCase = (str) => {\n  return str.split('').map((char) => {\n    if (char === char.toUpperCase() && str.indexOf(char) > 0 && char !== '-') {\n      char = `-${char}`;\n    }\n    return char;\n  }).join('').toLowerCase();\n};"
  },
  {
    "name": "Capitalize String",
    "description": "Capitalize words in a string",
    "content": "const capitalizeString = (str) => {\n  return str.split(' ').map(word => word.substring(0, 1).toUpperCase() + word.substring(1)).join(' ');\n};"
  },
  {
    "name": "Example Snippet",
    "description": "Example function snippet",
    "content": "function snippetExample(foo) {\n  if (!foo) {\n    return 'no foo!';\n  } else {\n    return 'âš¡';\n  }\n}"
  },
  {
    "name": "Rotate 2D Array Matrix (Image)",
    "description": "Given an n x n 2D array matrix that represents an image, rotate the image by 90 degrees clockwise",
    "content": "function rotateImage(a) {\n    return a.map((row, index) => {\n        return a.map((innerArr, innerIndex) => a[innerIndex][index]).reverse();\n    });\n}\n"
  },
  {
    "name": "Sort Array of Objects Comparator",
    "description": "A Comparator callback function to sort an Array Of Objects by property value",
    "content": "const compareName = (a, b) => {\n    if (a.name > b.name) {\n        return 1;\n    }\n    if (a.name < b.name) {\n        return -1;\n    }\n    return 0;\n};"
  }
]
